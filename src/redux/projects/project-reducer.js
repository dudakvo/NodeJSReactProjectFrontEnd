import { combineReducers } from 'redux';
import { createReducer } from '@reduxjs/toolkit';
import {
  fetchProjectsRequest,
  fetchProjectsSuccess,
  fetchProjectsError,
  createProjectRequest,
  createProjectSuccess,
  createProjectError,
  deleteProjectRequest,
  deleteProjectSuccess,
  deleteProjectError,
  fetchProjectByIdRequest,
  fetchProjectByIdSuccess,
  fetchProjectByIdError,
  updateProjectNameRequest,
  updateProjectNameSuccess,
  updateProjectNameError,
  addPeopleToProjectRequest,
  addPeopleToProjectSuccess,
  addPeopleToProjectError,
  createSprintRequest,
  createSprintSuccess,
  createSprintError,
  deleteSprintRequest,
  deleteSprintSuccess,
  deleteSprintError,
  fetchSprintByIdRequest,
  fetchSprintByIdSuccess,
  fetchSprintByIdError,
  updateSprintNameRequest,
  updateSprintNameSuccess,
  updateSprintNameError,
  createTaskRequest,
  createTaskSuccess,
  createTaskError,
  deleteTaskRequest,
  deleteTaskSuccess,
  deleteTaskError,
  updateTaskTimeRequest,
  updateTaskTimeSuccess,
  updateTaskTimeError,
  searchTaskByNameRequest,
  searchTaskByNameSuccess,
  searchTaskByNameError,
} from './project-actions';

const project = createReducer([], {
  [fetchProjectsSuccess]: (state, { payload }) => payload,
  [createProjectSuccess]: (state, { payload }) => [...state, payload],
  [deleteProjectSuccess]: (state, { payload }) =>
    state.filter(({ id }) => id !== payload),
  [fetchProjectByIdSuccess]: (state, { payload }) => payload,
  [addPeopleToProjectSuccess]: (state, { payload }) => [...state, payload],
  [updateProjectNameSuccess]: (state, { payload }) => [...state, payload],
});

const sprint = createReducer([], {
  [createSprintSuccess]: (state, { payload }) => [...state, payload],
  [deleteSprintSuccess]: (state, { payload }) =>
    state.filter(({ id }) => id !== payload),
  [fetchSprintByIdSuccess]: (state, { payload }) => payload,
  [updateSprintNameSuccess]: (state, { payload }) => [...state, payload],
});

const task = createReducer([], {
  [createTaskSuccess]: (state, { payload }) => [...state, payload],
  [deleteTaskSuccess]: (state, { payload }) =>
    state.filter(({ id }) => id !== payload),
  [updateTaskTimeSuccess]: (state, { payload }) => [...state, payload],
  [searchTaskByNameSuccess]: (state, { payload }) => payload,
});

const isLoading = createReducer(false, {
  [fetchProjectsRequest]: () => true,
  [fetchProjectsSuccess]: () => false,
  [fetchProjectsError]: () => false,
  [createProjectRequest]: () => true,
  [createProjectSuccess]: () => false,
  [createProjectError]: () => false,
  [deleteProjectRequest]: () => true,
  [deleteProjectSuccess]: () => false,
  [deleteProjectError]: () => false,
  [fetchProjectByIdRequest]: () => true,
  [fetchProjectByIdSuccess]: () => false,
  [fetchProjectByIdError]: () => false,
  [updateProjectNameRequest]: () => true,
  [updateProjectNameSuccess]: () => false,
  [updateProjectNameError]: () => false,
  [addPeopleToProjectRequest]: () => true,
  [addPeopleToProjectSuccess]: () => false,
  [addPeopleToProjectError]: () => false,
  [createSprintRequest]: () => true,
  [createSprintSuccess]: () => false,
  [createSprintError]: () => false,
  [deleteSprintRequest]: () => true,
  [deleteSprintSuccess]: () => false,
  [deleteSprintError]: () => false,
  [fetchSprintByIdRequest]: () => true,
  [fetchSprintByIdSuccess]: () => false,
  [fetchSprintByIdError]: () => false,
  [updateSprintNameRequest]: () => true,
  [updateSprintNameSuccess]: () => false,
  [updateSprintNameError]: () => false,
  [createTaskRequest]: () => true,
  [createTaskSuccess]: () => false,
  [createTaskError]: () => false,
  [deleteTaskRequest]: () => true,
  [deleteTaskSuccess]: () => false,
  [deleteTaskError]: () => false,
  [updateTaskTimeRequest]: () => true,
  [updateTaskTimeSuccess]: () => false,
  [updateTaskTimeError]: () => false,
  [searchTaskByNameRequest]: () => true,
  [searchTaskByNameSuccess]: () => false,
  [searchTaskByNameError]: () => false,
});

export default combineReducers({
  project,
  sprint,
  task,
  isLoading,
});
